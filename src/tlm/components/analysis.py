from dataclasses import dataclass
from typing import Optional

from .llm import LLMResult
from ..base import Instance, Label, QAData


@dataclass
class AnswerLabels:
    """
    Record of answer labels, one generated by an LLM, one being chosen as the ground
    truth for a particular ACCORD instance, and one being the correct (factual) answer
    from the underlying QA dataset.
    """

    generated: Optional[Label]
    chosen: Label
    factual: Label


@dataclass
class AnalysisBase:
    """Base class for storing a singular analysis output."""

    tree_size: int
    llm: str
    instance: Instance
    qa_data: QAData
    llm_result: LLMResult
    labels: AnswerLabels


def safe_div(score, count, zero_div=-1.0):
    """Returns score / count, unless count == 0, in which case zero_div is returned."""
    return zero_div if count == 0 else score / count
